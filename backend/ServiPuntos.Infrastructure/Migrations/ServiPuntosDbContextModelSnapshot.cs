// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiPuntos.Infrastructure.Data;

#nullable disable

namespace ServiPuntos.Infrastructure.Migrations
{
    [DbContext(typeof(ServiPuntosDbContext))]
    partial class ServiPuntosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PromocionUbicacion", b =>
                {
                    b.Property<Guid>("PromocionesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UbicacionesId")
                        .HasColumnType("uuid");

                    b.HasKey("PromocionesId", "UbicacionesId");

                    b.HasIndex("UbicacionesId");

                    b.ToTable("PromocionUbicacion");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Audiencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreDescriptivo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NombreUnicoInterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Prioridad")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Audiencias");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Canje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodigoQR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaCanje")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductoCanjeableId")
                        .HasColumnType("uuid");

                    b.Property<int>("PuntosCanjeados")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UbicacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CodigoQR")
                        .IsUnique();

                    b.HasIndex("ProductoCanjeableId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Canjes");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ConfigPlataforma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LargoMinimoPassword")
                        .HasColumnType("integer");

                    b.Property<int>("MaximoIntentosLogin")
                        .HasColumnType("integer");

                    b.Property<int>("TiempoExpiracion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ConfigPlataformas");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ProductoCanjeable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CostoEnPuntos")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductosCanjeables");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ProductoUbicacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductoCanjeableId")
                        .HasColumnType("uuid");

                    b.Property<int>("StockDisponible")
                        .HasColumnType("integer");

                    b.Property<Guid>("UbicacionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductoCanjeableId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("ProductoUbicaciones");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Promocion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudienciaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("DescuentoEnPuntos")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudienciaId");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ReglaAudiencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudienciaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Operador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OperadorLogicoConSiguiente")
                        .HasColumnType("text");

                    b.Property<int>("OrdenEvaluacion")
                        .HasColumnType("integer");

                    b.Property<string>("Propiedad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AudienciaId");

                    b.ToTable("ReglasAudiencia");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("DiasCaducidadPuntos")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombrePuntos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TasaCombustible")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TasaMinimercado")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TasaServicios")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorPunto")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Transaccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasColumnType("text");

<<<<<<< HEAD
=======
                    b.Property<string>("EstadoPayPal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaCompletadoPayPal")
                        .HasColumnType("timestamp with time zone");

>>>>>>> origin/dev
                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

<<<<<<< HEAD
=======
                    b.Property<decimal>("MontoPayPal")
                        .HasColumnType("numeric");

                    b.Property<string>("PagoPayPalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PayPalPayerId")
                        .HasColumnType("text");

                    b.Property<string>("PayPalToken")
                        .HasColumnType("text");

>>>>>>> origin/dev
                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("PuntosOtorgados")
                        .HasColumnType("integer");

<<<<<<< HEAD
                    b.Property<Guid>("ReferenciaExterna")
                        .HasColumnType("uuid");
=======
                    b.Property<int>("PuntosUtilizados")
                        .HasColumnType("integer");
>>>>>>> origin/dev

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("TipoTransaccion")
                        .HasColumnType("integer");

                    b.Property<Guid>("UbicacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FechaTransaccion");

                    b.HasIndex("TenantId");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Transacciones");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Ubicacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CambioDeAceite")
                        .HasColumnType("boolean");

                    b.Property<bool>("CambioDeNeumaticos")
                        .HasColumnType("boolean");

                    b.Property<bool>("CambioDeAceite")
                        .HasColumnType("boolean");

                    b.Property<bool>("CambioDeNeumaticos")
                        .HasColumnType("boolean");

                    b.Property<string>("Ciudad")
                        .HasColumnType("text");

                    b.Property<string>("Departamento")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("HoraApertura")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("HoraCierre")
                        .HasColumnType("interval");

                    b.Property<bool>("Lavado")
                        .HasColumnType("boolean");

                    b.Property<bool>("LavadoDeAuto")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<decimal?>("PrecioCambioAceite")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PrecioCambioNeumaticos")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PrecioDiesel")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PrecioLavado")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PrecioNaftaPremium")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PrecioNaftaSuper")
                        .HasColumnType("numeric");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<string>("Telefonoo")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("boolean");

                    b.Property<int>("Ci")
                        .HasColumnType("integer");

                    b.Property<string>("CiudadResidencia")
                        .HasColumnType("text");

                    b.Property<string>("CombustiblePreferido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EsSubscriptorPremium")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GastoPromedio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GastoTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Intereses")
                        .HasColumnType("text[]");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Puntos")
                        .HasColumnType("integer");

                    b.Property<int>("PuntosUtilizados")
                        .HasColumnType("integer");

                    b.Property<int>("Rol")
                        .HasColumnType("integer");

                    b.Property<int>("SegmentoClientes")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SegmentoDinamicoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Telefono")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCompras")
                        .HasColumnType("integer");

                    b.Property<int>("TotalVisitas")
                        .HasColumnType("integer");

<<<<<<< HEAD
=======
                    b.Property<Guid?>("UbicacionId")
                        .HasColumnType("uuid");

>>>>>>> origin/dev
                    b.Property<Guid>("UbicacionPreferida")
                        .HasColumnType("uuid");

                    b.Property<string>("UltimaCategoriaComprada")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UltimaVisita")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("VerificadoVEAI")
                        .HasColumnType("boolean");

                    b.Property<decimal>("VisitasPorMes")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("PromocionUbicacion", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Promocion", null)
                        .WithMany()
                        .HasForeignKey("PromocionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Ubicacion", null)
                        .WithMany()
                        .HasForeignKey("UbicacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Audiencia", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Tenant", "Tenant")
                        .WithMany("Audiencias")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Canje", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.ProductoCanjeable", "ProductoCanjeable")
                        .WithMany()
                        .HasForeignKey("ProductoCanjeableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductoCanjeable");

                    b.Navigation("Tenant");

                    b.Navigation("Ubicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ProductoUbicacion", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.ProductoCanjeable", "ProductoCanjeable")
                        .WithMany("DisponibilidadesPorUbicacion")
                        .HasForeignKey("ProductoCanjeableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Ubicacion", "Ubicacion")
                        .WithMany("ProductosLocales")
                        .HasForeignKey("UbicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductoCanjeable");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Promocion", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Audiencia", null)
                        .WithMany("Promociones")
                        .HasForeignKey("AudienciaId");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ReglaAudiencia", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Audiencia", "Audiencia")
                        .WithMany("Reglas")
                        .HasForeignKey("AudienciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audiencia");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Transaccion", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Ubicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Ubicacion", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Tenant", "Tenant")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Usuario", b =>
                {
                    b.HasOne("ServiPuntos.Core.Entities.Tenant", "Tenant")
                        .WithMany("Usuarios")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiPuntos.Core.Entities.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Audiencia", b =>
                {
                    b.Navigation("Promociones");

                    b.Navigation("Reglas");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Audiencia", b =>
                {
                    b.Navigation("Promociones");

                    b.Navigation("Reglas");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.ProductoCanjeable", b =>
                {
                    b.Navigation("DisponibilidadesPorUbicacion");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Tenant", b =>
                {
                    b.Navigation("Audiencias");

                    b.Navigation("Ubicaciones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiPuntos.Core.Entities.Ubicacion", b =>
                {
                    b.Navigation("ProductosLocales");
                });
#pragma warning restore 612, 618
        }
    }
}
