<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ServiPuntos.WebApp</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ServiPuntos.WebApp.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">ServiPuntos.WebApp</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">

                    <ul class="navbar-nav">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-area="" asp-controller="DashboardWApp" asp-action="Index">
                                    Dashboard
                                </a>
                            </li>
                        }
                    </ul>
                    <ul class="navbar-nav ms-auto">
                        <!-- Dark Mode Toggle -->
                        <li class="nav-item d-flex align-items-center me-3">
                            <div class="dark-mode-toggle">
                                <input type="checkbox" id="darkModeToggle" class="dark-mode-checkbox">
                                <label for="darkModeToggle" class="dark-mode-label">
                                    <i class="fas fa-sun sun-icon"></i>
                                    <i class="fas fa-moon moon-icon"></i>
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                        </li>

                        @if (!User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="btn btn-primary btn-sm my-2 my-sm-0" href="@Url.Action("Login", "AccountWApp")">
                                    <i class="fas fa-sign-in-alt"></i> Iniciar sesión
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item d-flex align-items-center me-2">
                                <span>Hola, @User.Identity.Name!</span>
                            </li>
                            <li class="nav-item">
                                <a class="btn btn-outline-danger btn-sm my-2 my-sm-0" href="@Url.Action("Logout", "AccountWApp")">
                                    <i class="fas fa-sign-out-alt"></i> Cerrar Sesión
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - ServiPuntos.WebApp - Tecnologo Informatico TSI .NET
        </div>
    </footer>
    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Bootstrap Theme Toggle Script Completo con Botones -->
    <script>
        // Bootstrap Theme Toggle Completo con Botones
        (function() {
            'use strict';
            
            function initBootstrapThemeToggle() {
                const darkModeToggle = document.getElementById('darkModeToggle');
                
                if (!darkModeToggle) return;
                
                // Selectores completos incluyendo todos los tipos de botones
                const themeSelectors = [
                    'body',
                    '.navbar',
                    '.card',
                    '.table',
                    '.form-control',
                    'select',
                    'input',
                    'textarea',
                    '.btn',              // Botones con clase .btn
                    'button',            // Elementos button
                    'input[type="button"]',   // Input type button
                    'input[type="submit"]',   // Input type submit
                    'input[type="reset"]',    // Input type reset
                    '.alert',
                    '.modal',
                    '.dropdown-menu',
                    '.offcanvas',
                    '.accordion',
                    '.nav',
                    '.breadcrumb',
                    '.pagination'
                ];
                
                // Función para aplicar tema
                function applyBootstrapTheme(isDark) {
                    const theme = isDark ? 'dark' : 'light';
                    console.log(`🎨 Aplicando tema: ${theme}`);
                    
                    // Aplicar a document y body
                    document.documentElement.setAttribute('data-bs-theme', theme);
                    document.body.setAttribute('data-bs-theme', theme);
                    
                    // Aplicar a elementos específicos
                    themeSelectors.forEach(selector => {
                        document.querySelectorAll(selector).forEach(element => {
                            element.setAttribute('data-bs-theme', theme);
                        });
                    });
                    
                    // Aplicación específica y agresiva para botones
                    applyThemeToButtons(theme);
                    
                    console.log(`✅ Tema ${theme} aplicado a todos los elementos`);
                }
                
                // Función específica para botones
                function applyThemeToButtons(theme) {
                    // Selectores específicos para botones
                    const buttonSelectors = [
                        '.btn',
                        'button',
                        'input[type="button"]',
                        'input[type="submit"]',
                        'input[type="reset"]',
                        '[role="button"]'
                    ];
                    
                    buttonSelectors.forEach(selector => {
                        document.querySelectorAll(selector).forEach(button => {
                            button.setAttribute('data-bs-theme', theme);
                        });
                    });
                    
                    console.log(`🔘 Tema aplicado específicamente a botones`);
                }
                
                // Función para aplicar a elementos dinámicos
                function applyThemeToNewElements() {
                    const currentTheme = document.documentElement.getAttribute('data-bs-theme') || 'light';
                    
                    // Aplicar a elementos sin tema
                    themeSelectors.forEach(selector => {
                        document.querySelectorAll(`${selector}:not([data-bs-theme])`).forEach(element => {
                            element.setAttribute('data-bs-theme', currentTheme);
                        });
                    });
                    
                    // Aplicar específicamente a botones nuevos
                    applyThemeToButtons(currentTheme);
                }
                
                // Observer mejorado para elementos dinámicos
                const observer = new MutationObserver(function(mutations) {
                    let hasNewElements = false;
                    
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                            mutation.addedNodes.forEach(function(node) {
                                if (node.nodeType === 1) { // Element node
                                    hasNewElements = true;
                                }
                            });
                        }
                    });
                    
                    if (hasNewElements) {
                        setTimeout(applyThemeToNewElements, 50);
                    }
                });
                
                observer.observe(document.body, { 
                    childList: true, 
                    subtree: true
                });
                
                // Guardar/cargar preferencia
                function saveTheme(isDark) {
                    try {
                        localStorage.setItem('darkMode', isDark ? 'enabled' : 'disabled');
                    } catch (e) {}
                }
                
                function loadTheme() {
                    try {
                        const saved = localStorage.getItem('darkMode');
                        if (saved === 'enabled') return true;
                        if (saved === 'disabled') return false;
                        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
                    } catch (e) {
                        return false;
                    }
                }
                
                // Inicialización
                const shouldUseDarkMode = loadTheme();
                darkModeToggle.checked = shouldUseDarkMode;
                applyBootstrapTheme(shouldUseDarkMode);
                
                // Event listener
                darkModeToggle.addEventListener('change', function() {
                    const isDark = this.checked;
                    applyBootstrapTheme(isDark);
                    saveTheme(isDark);
                });
                
                // Monitorear cambios del sistema
                if (window.matchMedia) {
                    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
                        const savedTheme = localStorage.getItem('darkMode');
                        if (!savedTheme) {
                            darkModeToggle.checked = e.matches;
                            applyBootstrapTheme(e.matches);
                        }
                    });
                }
                
                // Debug para botones
                window.themeDebug = {
                    forceOn: () => { 
                        darkModeToggle.checked = true; 
                        applyBootstrapTheme(true); 
                    },
                    forceOff: () => { 
                        darkModeToggle.checked = false; 
                        applyBootstrapTheme(false); 
                    },
                    getCurrentTheme: () => document.documentElement.getAttribute('data-bs-theme'),
                    countButtons: () => {
                        const buttons = document.querySelectorAll('.btn, button, input[type="button"], input[type="submit"]');
                        const withTheme = document.querySelectorAll('.btn[data-bs-theme], button[data-bs-theme], input[type="button"][data-bs-theme], input[type="submit"][data-bs-theme]');
                        return {
                            total: buttons.length,
                            withTheme: withTheme.length,
                            missing: buttons.length - withTheme.length
                        };
                    },
                    testButtons: () => {
                        const stats = window.themeDebug.countButtons();
                        console.log('🔘 Estadísticas de botones:', stats);
                        return stats;
                    }
                };
                
                // Aplicar tema inicial específicamente a botones
                setTimeout(() => {
                    applyThemeToNewElements();
                    console.log('✅ Tema aplicado a elementos iniciales incluyendo botones');
                }, 100);
            }
            
            // Inicializar
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initBootstrapThemeToggle);
            } else {
                initBootstrapThemeToggle();
            }
        })();
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>